// Copyright 2020 Northern.tech AS
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by mockery v2.2.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/mendersoftware/mender-server/services/deviceconnect/model"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Search provides a mock function with given fields: ctx, tenantId, filter
func (_m *Client) Search(ctx context.Context, tenantId string, filter model.SearchParams) ([]model.InvDevice, int, error) {
	ret := _m.Called(ctx, tenantId, filter)

	var r0 []model.InvDevice
	if rf, ok := ret.Get(0).(func(context.Context, string, model.SearchParams) []model.InvDevice); ok {
		r0 = rf(ctx, tenantId, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.InvDevice)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, model.SearchParams) int); ok {
		r1 = rf(ctx, tenantId, filter)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, model.SearchParams) error); ok {
		r2 = rf(ctx, tenantId, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
