name: mender

services:
  auditlogs:
    build:
      context: ..
      dockerfile: ./backend/services/auditlogs/Dockerfile
    image: auditlogs
    pull_policy: never
    restart: on-failure:3
    command: [server, --automigrate]
    depends_on:
      - mongo
    environment:
      AUDITLOGS_MONGO_URL: "mongodb://mongo"
    labels:
      traefik.enable: "true"
      traefik.http.services.auditlogs.loadBalancer.server.port: "8080"
      traefik.http.routers.auditlogs.entrypoints: "websecure"
      traefik.http.routers.auditlogs.middlewares: "mgmtStack@file"
      traefik.http.routers.auditlogs.rule: >-
        PathPrefix(`/api/management/{version:v[0-9]+}/auditlogs`)
      traefik.http.routers.auditlogs.service: auditlogs
    networks:
      default:
        aliases: [mender-auditlogs]

  create-artifact-worker:
    build:
      context: ..
      dockerfile: ./backend/services/create-artifact-worker/Dockerfile
    image: create-artifact-worker
    pull_policy: never
    restart: on-failure:3
    command: [worker]
    depends_on:
      - workflows
    environment:
      CREATE_ARTIFACT_SKIPVERIFY: "true"
      WORKFLOWS_MONGO_URL: "mongodb://mongo"
      WORKFLOWS_NATS_URI: "nats://nats"

  deployments:
    build:
      context: ..
      dockerfile: ./backend/services/deployments/Dockerfile
    image: deployments
    pull_policy: never
    restart: on-failure:3
    command: [server, --automigrate]
    depends_on:
      mongo:
        condition: service_started
        required: true
      s3fs:
        condition: service_healthy
        required: true
    environment:
      DEPLOYMENTS_PRESIGN_URL_HOSTNAME: "localhost"
      DEPLOYMENTS_PRESIGN_SECRET: "aW5zZWN1cmUgc2VjcmV0"
      DEPLOYMENTS_INVENTORY_ADDR: http://inventory:8080
      DEPLOYMENTS_MENDER_WORKFLOWS: http://workflows:8080
      DEPLOYMENTS_MONGO_URL: "mongodb://mongo"
      DEPLOYMENTS_STORAGE_BUCKET: "mender"
      DEPLOYMENTS_AWS_URI: "http://s3fs:8333"
      DEPLOYMENTS_AWS_EXTERNAL_URI: "https://s3.localhost"
      DEPLOYMENTS_AWS_AUTH_KEY: "mender"
      DEPLOYMENTS_AWS_AUTH_SECRET: "thisisnotsecure"
      DEPLOYMENTS_HAVE_AUDIT: "1"
    labels:
      traefik.enable: "true"
      traefik.http.services.deployments.loadBalancer.server.port: "8080"
      traefik.http.routers.deploymentsDL.entrypoints: "websecure"
      traefik.http.routers.deploymentsDL.middlewares: "sec-headers@file,json-error-responder@file"
      traefik.http.routers.deploymentsDL.rule: >-
        PathPrefix(`/api/devices/{version:v[0-9]+}/deployments/download`)
      traefik.http.routers.deploymentsDL.service: deployments
      traefik.http.routers.deploymentsDev.entrypoints: "websecure"
      traefik.http.routers.deploymentsDev.middlewares: "devStack@file"
      traefik.http.routers.deploymentsDev.rule: >-
        PathPrefix(`/api/devices/{version:v[0-9]+}/deployments`)
      traefik.http.routers.deploymentsDev.service: deployments
      traefik.http.routers.deploymentsMgmt.entrypoints: "websecure"
      traefik.http.routers.deploymentsMgmt.middlewares: "mgmtStack@file"
      traefik.http.routers.deploymentsMgmt.rule: >-
        PathPrefix(`/api/management/{version:v[0-9]+}/deployments`)
      traefik.http.routers.deploymentsMgmt.service: deployments
    networks:
      default:
        aliases: [mender-deployments]

  deviceauth:
    build:
      context: ..
      dockerfile: ./backend/services/deviceauth/Dockerfile
    image: deviceauth
    pull_policy: never
    restart: on-failure:3
    command: [server, --automigrate]
    depends_on:
      - mongo
    environment:
      DEVICEAUTH_INVENTORY_ADDR: http://inventory:8080
      DEVICEAUTH_ORCHESTRATOR_ADDR: http://workflows:8080
      DEVICEAUTH_MONGO: "mongodb://mongo"
      DEVICEAUTH_SERVER_PRIV_KEY_PATH: "/etc/deviceauth/private.pem"
      DEVICEAUTH_REDIS_CONNECTION_STRING: "redis://redis:6379"
      DEVICEAUTH_REDIS_LIMITS_EXPIRE_SEC: "3600"
      DEVICEAUTH_TENANTADM_ADDR: 'http://tenantadm:8080'
      DEVICEAUTH_HAVE_ADDONS: "1"
      DEVICEAUTH_ENABLE_AUDIT: "1"
    volumes:
      - ./config/mender.pem:/etc/deviceauth/private.pem

    labels:
      traefik.enable: "true"
      traefik.http.services.deviceauth.loadBalancer.server.port: "8080"
      traefik.http.routers.deviceauthDev.entrypoints: "websecure"
      traefik.http.routers.deviceauthDev.middlewares: "compression@file"
      traefik.http.routers.deviceauthDev.rule: >-
        PathPrefix(`/api/devices/{(v[0-9]+)}/authentication`)
      traefik.http.routers.deviceauthDev.service: deviceauth
      traefik.http.routers.deviceauthMgmt.entrypoints: "websecure"
      traefik.http.routers.deviceauthMgmt.middlewares: "mgmtStack@file"
      traefik.http.routers.deviceauthMgmt.rule: >-
        PathPrefix(`/api/management/{version:v[0-9]+}/devauth`)
      traefik.http.routers.deviceauthMgmt.service: deviceauth
    networks:
      default:
        aliases: [mender-deviceauth]

  deviceconfig:
    build:
      context: ..
      dockerfile: ./backend/services/deviceconfig/Dockerfile
    image: deviceconfig
    pull_policy: never
    restart: on-failure:3
    command: [server, --automigrate]
    depends_on:
      - mongo
    environment:
      DEVICECONFIG_INVENTORY_URI: http://inventory:8080
      DEVICECONFIG_WORKFLOWS_URL: http://workflows:8080
      DEVICECONFIG_MONGO_URL: "mongodb://mongo"
    labels:
      traefik.enable: "true"
      traefik.http.services.deviceconfig.loadBalancer.server.port: "8080"
      traefik.http.routers.deviceconfigDev.entrypoints: "websecure"
      traefik.http.routers.deviceconfigDev.middlewares: "devStack@file"
      traefik.http.routers.deviceconfigDev.rule: >-
        PathPrefix(`/api/devices/{version:v[0-9]+}/deviceconfig`)
      traefik.http.routers.deviceconfigDev.service: deviceconfig
      traefik.http.routers.deviceconfigMgmt.entrypoints: "websecure"
      traefik.http.routers.deviceconfigMgmt.middlewares: "mgmtStack@file"
      traefik.http.routers.deviceconfigMgmt.rule: >-
        PathPrefix(`/api/management/{version:v[0-9]+}/deviceconfig`)
      traefik.http.routers.deviceconfigMgmt.service: deviceconfig
    networks:
      default:
        aliases: [mender-deviceconfig]

  deviceconnect:
    build:
      context: ..
      dockerfile: ./backend/services/deviceconnect/Dockerfile
    image: deviceconnect
    pull_policy: never
    restart: on-failure:3
    command: [server, --automigrate]
    depends_on:
      - mongo
      - nats
    environment:
      DEVICECONNECT_INVENTORY_URI: http://inventory:8080
      DEVICECONNECT_WORKFLOWS_URL: http://workflows:8080
      DEVICECONNECT_MONGO_URL: "mongodb://mongo"
      DEVICECONNECT_NATS_URL: "mongodb://mongo"
    labels:
      traefik.enable: "true"
      traefik.http.services.deviceconnect.loadBalancer.server.port: "8080"
      traefik.http.routers.deviceconnectDev.entrypoints: "websecure"
      traefik.http.routers.deviceconnectDev.middlewares: "devStack@file"
      traefik.http.routers.deviceconnectDev.rule: >-
        PathPrefix(`/api/devices/{version:v[0-9]+}/deviceconnect`)
      traefik.http.routers.deviceconnectDev.service: deviceconnect
      traefik.http.routers.deviceconnectMgmt.entrypoints: "websecure"
      traefik.http.routers.deviceconnectMgmt.middlewares: "mgmtStack@file"
      traefik.http.routers.deviceconnectMgmt.rule: >-
        PathPrefix(`/api/management/{version:v[0-9]+}/deviceconnect`)
      traefik.http.routers.deviceconnectMgmt.service: deviceconnect
    networks:
      default:
        aliases: [mender-deviceconnect]

  devicemonitor:
    build:
      context: ..
      dockerfile: ./backend/services/devicemonitor/Dockerfile
    image: devicemonitor
    pull_policy: never
    restart: on-failure:3
    command: [server, --automigrate]
    depends_on:
      - mongo
    environment:
      DEVICEMONITOR_MONGO_URL: "mongodb://mongo"
    labels:
      traefik.enable: "true"
      traefik.http.services.devicemonitor.loadBalancer.server.port: "8080"
      traefik.http.routers.devicemonitorDev.entrypoints: "websecure"
      traefik.http.routers.devicemonitorDev.middlewares: "devStack@file"
      traefik.http.routers.devicemonitorDev.rule: >-
        PathPrefix(`/api/devices/{version:v[0-9]+}/devicemonitor`)
      traefik.http.routers.devicemonitorDev.service: devicemonitor
      traefik.http.routers.devicemonitorMgmt.entrypoints: "websecure"
      traefik.http.routers.devicemonitorMgmt.middlewares: "mgmtStack@file"
      traefik.http.routers.devicemonitorMgmt.rule: >-
        PathPrefix(`/api/management/{version:v[0-9]+}/devicemonitor`)
      traefik.http.routers.devicemonitorMgmt.service: devicemonitor
    networks:
      default:
        aliases: [mender-devicemonitor]

  generate-delta-worker:
    build:
      context: ..
      dockerfile: ./backend/services/generate-delta-worker/Dockerfile
    image: generate-delta-worker
    pull_policy: never
    restart: on-failure:3
    depends_on:
      - workflows
    environment:
      GENERATE_DELTA_DELPOYMENTS_URL: http://deployments:8080
      WORKFLOWS_MONGO_URL: "mongodb://mongo"
      WORKFLOWS_NATS_URI: "nats://nats"

  gui:
    image: mendersoftware/gui:mender-master #FIXME: replace with locally built image
    restart: on-failure:3
    labels:
      traefik.enable: "true"
      traefik.http.services.gui.loadBalancer.server.port: "80"
      traefik.http.services.error-responder.loadBalancer.server.port: "8080"
      traefik.http.routers.gui.entrypoints: "websecure"
      traefik.http.routers.gui.middlewares: >-
        compression@file,sec-headers@file,json-error-responder@file
      traefik.http.routers.gui.rule: PathPrefix(`/`)
      traefik.http.routers.gui.service: gui
    environment:
      HAVE_AUDITLOGS: "1"
      HAVE_DEVICECONFIG: "1"
      HAVE_DEVICECONNECT: "1"
      HAVE_ENTERPRISE: "1"
      HAVE_MONITOR: "1"
      HAVE_MULTITENANT: "1"
    networks:
      default:
        aliases: [mender-gui]

  inventory:
    build:
      context: ..
      dockerfile: ./backend/services/inventory/Dockerfile
    image: inventory
    pull_policy: never
    restart: on-failure:3
    command: [server, --automigrate]
    depends_on:
      - mongo
    environment:
      INVENTORY_DEVICEMONITOR_ADDR: http://devicemonitor:8080
      INVENTORY_ORCHESTRATOR_ADDR: http://workflows:8080
      INVENTORY_MONGO: mongodb://mongo
      INVENTORY_REDIS_CONNECTION_STRING: "redis://redis:6379"
      INVENTORY_REDIS_LIMITS_EXPIRE_SEC: "1800"
    labels:
      traefik.enable: "true"
      traefik.http.services.inventory.loadBalancer.server.port: "8080"
      traefik.http.routers.inventoryDevV1.entrypoints: "websecure"
      traefik.http.routers.inventoryDevV1.middlewares: >-
        inventoryV1-replacepathregex@file,devStack@file
      traefik.http.routers.inventoryDevV1.rule: >-
        PathPrefix(`/api/devices/v1/inventory`)
      traefik.http.routers.inventoryDevV1.service: inventory
      traefik.http.routers.inventoryMgmtV1.entrypoints: "websecure"
      traefik.http.routers.inventoryMgmtV1.middlewares: >-
        inventoryMgmtV1-replacepathregex@file,mgmtStack@file
      traefik.http.routers.inventoryMgmtV1.rule: >-
        PathPrefix(`/api/management/v1/inventory`)
      traefik.http.routers.inventoryMgmtV1.service: inventory
      traefik.http.routers.inventoryDev.entrypoints: "websecure"
      traefik.http.routers.inventoryDev.middlewares: "devStack@file"
      traefik.http.routers.inventoryDev.rule: >-
        PathPrefix(`/api/devices/{version:v[2-9]}/inventory`)
      traefik.http.routers.inventoryDev.service: inventory
      traefik.http.routers.inventoryMgmt.entrypoints: "websecure"
      traefik.http.routers.inventoryMgmt.middlewares: "mgmtStack@file"
      traefik.http.routers.inventoryMgmt.rule: >-
        PathPrefix(`/api/management/{version:v[2-9]}/inventory`)
      traefik.http.routers.inventoryMgmt.service: inventory

    networks:
      default:
        aliases: [mender-inventory]

  iot-manager:
    build:
      context: ..
      dockerfile: ./backend/services/iot-manager/Dockerfile
    image: iot-manager
    pull_policy: never
    restart: on-failure:3
    command: [server, --automigrate]
    depends_on:
      - mongo
    environment:
      IOT_MANAGER_DEVICEAUTH_URL: "http://deviceauth:8080"
      IOT_MANAGER_WORKFLOWS_URL: "http://workflows:8080"
      IOT_MANAGER_MONGO_URL: "mongodb://mongo"
    labels:
      traefik.enable: "true"
      traefik.http.services.iot-manager.loadBalancer.server.port: "8080"
      traefik.http.routers.iot-managerMgmt.entrypoints: "websecure"
      traefik.http.routers.iot-managerMgmt.middlewares: "mgmtStack@file"
      traefik.http.routers.iot-managerMgmt.rule: >-
        PathPrefix(`/api/management/{version:v[0-9]+}/iot-manager`)
      traefik.http.routers.iot-managerMgmt.service: iot-manager
    networks:
      default:
        aliases: [mender-iot-manager]

  useradm:
    build:
      context: ..
      dockerfile: ./backend/services/useradm/Dockerfile
    image: useradm
    pull_policy: never
    restart: on-failure:3
    command: [server, --automigrate]
    depends_on:
      - mongo
    environment:
      USERADM_MONGO: "mongodb://mongo"
      USERADM_SERVER_PRIV_KEY_PATH: "/etc/useradm/private.pem"
      USERADM_PLAN_DEFINITIONS_PATH: "/etc/useradm/plans.yaml"
      USERADM_REDIS_CONNECTION_STRING: "redis://redis:6379"
      USERADM_REDIS_LIMITS_EXPIRE_SEC: "3600"
      USERADM_TENANTADM_ADDR: 'http://tenantadm:8080'
      USERADM_HAVE_ADDONS: "1"
      USERADM_ENABLE_AUDIT: "1"
    labels:
      traefik.enable: "true"
      traefik.http.services.useradm.loadBalancer.server.port: "8080"
      traefik.http.routers.useradm.entrypoints: "websecure"
      traefik.http.routers.useradm.middlewares: "mgmtStack@file"
      traefik.http.routers.useradm.rule: >-
        PathPrefix(`/api/management/{version:v[0-9]+}/useradm`)
      traefik.http.routers.useradm.service: useradm
      traefik.http.routers.userauth.entrypoints: "websecure"
      traefik.http.routers.userauth.middlewares: >-
        compression@file,sec-headers@file,json-error-responder@file
      traefik.http.routers.userauth.rule: >-
        !Path(`/api/management/{ver:v[0-9]+}/useradm/auth/logout`) &&
        PathPrefix(`/api/management/{ver:v[0-9]+}/useradm/{ep:(auth|oauth2|oidc)}`)
      traefik.http.routers.userauth.service: useradm
    networks:
      default:
        aliases: [mender-useradm]
    volumes:
      - ./config/mender.pem:/etc/useradm/private.pem
      - ../backend/services/useradm/config/plans.yaml:/etc/useradm/plans.yaml

  tenantadm:
    build:
      context: ..
      dockerfile: ./backend/services/tenantadm/Dockerfile
    image: tenantadm
    pull_policy: never
    restart: on-failure:3
    command: [server, --automigrate]
    depends_on:
      - mongo
    environment:
      TENANTADM_MONGO: "mongodb://mongo"
      TENANTADM_ORCHESTRATOR_ADDR: http://workflows:8080/
      TENANTADM_USERADM_ADDR: http://useradm:8080/
      TENANTADM_DEVICEAUTH_ADDR: http://deviceauth:8080/
      TENANTADM_DEPLOYMENTS_ADDR: http://deployments:8080/
      TENANTADM_ENABLE_SELF_SERVICE_SIGN_UP: 1
    labels:
      traefik.enable: "true"
      traefik.http.services.tenantadm.loadBalancer.server.port: "8080"
      traefik.http.routers.tenantadm.entrypoints: "websecure"
      traefik.http.routers.tenantadm.middlewares: "mgmtStack@file"
      traefik.http.routers.tenantadm.rule: >-
        PathPrefix(`/api/management/{version:v[0-9]}/tenantadm`)
      traefik.http.routers.tenantadm.service: tenantadm
      traefik.http.routers.tenantadmOpen.entrypoints: "websecure"
      traefik.http.routers.tenantadmOpen.middlewares: >-
        compression@file,sec-headers@file,json-error-responder@file
      traefik.http.routers.signup.rule: >-
        Method(`OPTIONS`,`POST`) && Path(`/api/management/{version:v[0-9]+}/tenantadm/tenants/trial`) ||
        Method(`OPTIONS`,`POST`) && PathPrefix(`/api/management/{version:v[0-9]+}/tenantadm/tenants/signup`)
      traefik.http.routers.signup.service: tenantadm
    networks:
      default:
        aliases: [mender-tenantadm]
    volumes:
      - ../backend/services/tenantadm/config/plan-bindings.yaml:/etc/tenantadm/plan-bindings.yaml

  workflows-worker:
    build:
      context: ..
      dockerfile: ./backend/services/workflows/Dockerfile
    image: workflows
    pull_policy: never
    restart: on-failure:3
    command: ["worker"]
    depends_on:
      - workflows
    environment:
      WORKFLOWS_MONGO_URL: "mongodb://mongo"
      WORKFLOWS_NATS_URI: "nats://nats"
      AUDITLOGS_ADDR: auditlogs:8080
      DEPLOYMENTS_ADDR: deployments:8080
      DEVICEAUTH_ADDR: deviceauth:8080
      DEVICECONFIG_ADDR: deviceconfig:8080
      DEVICECONNECT_ADDR: deviceconnect:8080
      INVENTORY_ADDR: inventory:8080
      IOT_MANAGER_ADDR: iot-manager:8080
      TENANTADM_ADDR: tenantadm:8080
      USERADM_ADDR: useradm:8080
      WORKFLOWS_SERVER_ADDR: workflows:8080
      WOKRFLOWS_MENDER_URL: https://localhost
      HAVE_AUDITLOGS: "1"
      HAVE_DEVICECONFIG: "1"

  workflows:
    build:
      context: ..
      dockerfile: ./backend/services/workflows/Dockerfile
    image: workflows
    pull_policy: never
    restart: on-failure:3
    command: [server, --automigrate]
    depends_on:
      - mongo
      - nats
    environment:
      WORKFLOWS_MONGO_URL: "mongodb://mongo"
      WORKFLOWS_NATS_URI: "nats://nats"
    networks:
      default:
        aliases: [mender-workflows]

  traefik:
    image: traefik:v2.10
    command:
      - --api=true
      - --api.insecure=true
      - --accesslog=true
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.transport.respondingTimeouts.idleTimeout=7200
      - --entrypoints.websecure.transport.respondingTimeouts.readTimeout=7200
      - --entrypoints.websecure.transport.respondingTimeouts.writeTimeout=7200
      - --entrypoints.websecure.http.tls=true
      - --providers.file.directory=/etc/traefik/config
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
    volumes:
      - ./config/traefik.middlewares.yaml:/etc/traefik/config/traefik.middlewares.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - 443:443
      - 80:80
    networks:
      default:
        aliases: [s3.localhost]

  mongo:
    image: mongo:6.0
    volumes :
      - mongo:/data
    networks:
      default:
        aliases: [mender-mongo]

  nats:
    image: nats:2.10
    command: [-js]
    networks:
      default:
        aliases: [mender-nats]

  redis:
    image: redis:7.2
    networks:
      default:
        aliases: [mender-redis]

  s3fs:
    image: chrislusf/seaweedfs
    volumes:
      - s3:/data
      - ./config/s3.conf:/etc/seaweedfs/s3.conf
    labels:
      traefik.enable: "true"
      traefik.http.routers.s3fs.priority: "99999"
      traefik.http.routers.s3fs.rule: Host(`s3.localhost`)
      traefik.http.services.s3fs.loadBalancer.server.port: "8333"
    command: [server -s3 -s3.config /etc/seaweedfs/s3.conf]
    healthcheck:
      test:
        - CMD
        - "/usr/bin/nc"
        - "-z"
        - "127.0.0.1"
        - "8333"
      retries: 10

volumes:
  s3: {}
  mongo: {}
