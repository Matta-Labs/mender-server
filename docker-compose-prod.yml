services:
  create-artifact-worker:
    build:
      context: .
      dockerfile: ./backend/services/create-artifact-worker/Dockerfile
    environment:
      CREATE_ARTIFACT_SKIPVERIFY: "true"
      WORKFLOWS_MONGO_URL: ${MONGO_SERVER}
      WORKFLOWS_MONGO_USERNAME: ${MONGO_USER}
      WORKFLOWS_MONGO_PASSWORD: ${MONGO_PASSWORD}
      WORKFLOWS_NATS_URI: nats://nats
    image: ${MENDER_IMAGE_REGISTRY:-localhost:5000}/${MENDER_IMAGE_REPOSITORY:-mendersoftware}/create-artifact-worker:${MENDER_IMAGE_TAG:-latest}
    networks:
      traefik-public:
        aliases: [mender-create-artifact-worker]
    restart: on-failure:3

  deployments:
    build:
      context: .
      dockerfile: ./backend/services/deployments/Dockerfile
    image: ${MENDER_IMAGE_REGISTRY:-localhost:5000}/${MENDER_IMAGE_REPOSITORY:-mendersoftware}/deployments:${MENDER_IMAGE_TAG:-latest}
    restart: on-failure:3
    command: [server, --automigrate]
    environment:
      DEPLOYMENTS_PRESIGN_URL_HOSTNAME: ${DOMAIN}
      DEPLOYMENTS_PRESIGN_SECRET: ${MENDER_DEPLOYMENTS_PRESIGN_SECRET}
      DEPLOYMENTS_INVENTORY_ADDR: http://inventory:8080
      DEPLOYMENTS_MENDER_WORKFLOWS: http://workflows:8080
      DEPLOYMENTS_MONGO_URL: ${MONGO_SERVER}
      DEPLOYMENTS_MONGO_USERNAME: ${MONGO_USER}
      DEPLOYMENTS_MONGO_PASSWORD: ${MONGO_PASSWORD}
      DEPLOYMENTS_STORAGE_BUCKET: ${S3_SPACE_BUCKET}
      DEPLOYMENTS_AWS_URI: ${S3_SERVER}
      DEPLOYMENTS_AWS_EXTERNAL_URI: ${S3_SERVER}
      DEPLOYMENTS_AWS_AUTH_KEY: "${S3_ACCESS_ID}"
      DEPLOYMENTS_AWS_AUTH_SECRET: "${S3_SECRET_KEY}"
    deploy:
      labels:
        traefik.enable: "true"
        traefik.constraint-label-stack: traefik-public
        traefik.http.services.deployments.loadbalancer.server.port: "8080"
        traefik.http.routers.deploymentsDL.middlewares: "sec-headers@file,json-error-responder@file"
        traefik.http.routers.deploymentsDL.rule: >-
          PathPrefix(`/api/devices/{version:v[0-9]+}/deployments/download`)
        traefik.http.routers.deploymentsDL.service: deployments
        traefik.http.routers.deploymentsDev.middlewares: "devStack@file"
        traefik.http.routers.deploymentsDev.rule: >-
          PathPrefix(`/api/devices/{version:v[0-9]+}/deployments`)
        traefik.http.routers.deploymentsDev.service: deployments
        traefik.http.routers.deploymentsMgmt.middlewares: "mgmtStack@file"
        traefik.http.routers.deploymentsMgmt.rule: >-
          PathPrefix(`/api/management/{version:v[0-9]+}/deployments`)
        traefik.http.routers.deploymentsMgmt.service: deployments
    networks:
      traefik-public:
        aliases: [mender-deployments]
      default:
        aliases: [mender-deployments]

  deviceauth:
    build:
      context: .
      dockerfile: ./backend/services/deviceauth/Dockerfile
    # image: $${MENDER_IMAGE_REGISTRY:-localhost:5000}/$${MENDER_IMAGE_REPOSITORY:-mendersoftware}/deviceauth:$${MENDER_IMAGE_TAG:-latest}
    image: ${MENDER_IMAGE_REGISTRY:-localhost:5000}/${MENDER_IMAGE_REPOSITORY:-mendersoftware}/deviceauth:${MENDER_IMAGE_TAG:-latest}
    restart: on-failure:3
    command: [server, --automigrate]
    environment:
      DEVICEAUTH_INVENTORY_ADDR: http://inventory:8080
      DEVICEAUTH_ORCHESTRATOR_ADDR: http://workflows:8080
      DEVICEAUTH_MONGO: ${MONGO_SERVER}
      DEVICEAUTH_MONGO_USERNAME: ${MONGO_USER}
      DEVICEAUTH_MONGO_PASSWORD: ${MONGO_PASSWORD}
      DEVICEAUTH_SERVER_PRIV_KEY_PATH: "/etc/deviceauth/private.pem"
    volumes:
      - ./compose/config/mender.pem:/etc/deviceauth/private.pem
    deploy:
      labels:
        traefik.enable: "true"
        traefik.constraint-label-stack: traefik-public
        traefik.http.services.deviceauth.loadbalancer.server.port: "8080"
        traefik.http.routers.deviceauthDev.middlewares: "compression@file"
        traefik.http.routers.deviceauthDev.rule: >-
          PathPrefix(`/api/devices/{version:v[0-9]+}/authentication`)
        traefik.http.routers.deviceauthDev.service: deviceauth
        traefik.http.routers.deviceauthMgmt.middlewares: "mgmtStack@file"
        traefik.http.routers.deviceauthMgmt.rule: >-
          PathPrefix(`/api/management/{version:v[0-9]+}/devauth`)
        traefik.http.routers.deviceauthMgmt.service: deviceauth
    networks:
      traefik-public:
        aliases: [mender-deviceauth]

  deviceconfig:
    build:
      context: .
      dockerfile: ./backend/services/deviceconfig/Dockerfile
    image: ${MENDER_IMAGE_REGISTRY:-localhost:5000}/${MENDER_IMAGE_REPOSITORY:-mendersoftware}/deviceconfig:${MENDER_IMAGE_TAG:-latest}
    restart: on-failure:3
    command: [server, --automigrate]
    environment:
      DEVICECONFIG_INVENTORY_URI: http://inventory:8080
      DEVICECONFIG_WORKFLOWS_URL: http://workflows:8080
      DEVICECONFIG_MONGO_URL: ${MONGO_SERVER}
      DEVICECONFIG_MONGO_USERNAME: ${MONGO_USER}
      DEVICECONFIG_MONGO_PASSWORD: ${MONGO_PASSWORD}
    deploy:
      labels:
        traefik.enable: "true"
        traefik.constraint-label-stack: traefik-public
        traefik.http.services.deviceconfig.loadbalancer.server.port: "8080"
        traefik.http.routers.deviceconfigDev.middlewares: "devStack@file"
        traefik.http.routers.deviceconfigDev.rule: >-
          PathPrefix(`/api/devices/{version:v[0-9]+}/deviceconfig`)
        traefik.http.routers.deviceconfigDev.service: deviceconfig
        traefik.http.routers.deviceconfigMgmt.middlewares: "mgmtStack@file"
        traefik.http.routers.deviceconfigMgmt.rule: >-
          PathPrefix(`/api/management/{version:v[0-9]+}/deviceconfig`)
        traefik.http.routers.deviceconfigMgmt.service: deviceconfig
    networks:
      traefik-public:
        aliases: [mender-deviceconfig]
      default:
        aliases: [mender-deviceconfig]

  deviceconnect:
    build:
      context: .
      dockerfile: ./backend/services/deviceconnect/Dockerfile
    image: ${MENDER_IMAGE_REGISTRY:-localhost:5000}/${MENDER_IMAGE_REPOSITORY:-mendersoftware}/deviceconnect:${MENDER_IMAGE_TAG:-latest}
    restart: on-failure:3
    command: [server, --automigrate]
    environment:
      DEVICECONNECT_INVENTORY_URI: http://inventory:8080
      DEVICECONNECT_WORKFLOWS_URL: http://workflows:8080
      DEVICECONNECT_MONGO_URL: ${MONGO_SERVER}
      DEVICECONNECT_MONGO_USERNAME: ${MONGO_USER}
      DEVICECONNECT_MONGO_PASSWORD: ${MONGO_PASSWORD}
      DEVICECONNECT_NATS_URL: ${MONGO_SERVER}
    deploy:
      labels:
        traefik.enable: "true"
        traefik.constraint-label-stack: traefik-public
        traefik.http.services.deviceconnect.loadbalancer.server.port: "8080"
        traefik.http.routers.deviceconnectDev.middlewares: "devStack@file"
        traefik.http.routers.deviceconnectDev.rule: >-
          PathPrefix(`/api/devices/{version:v[0-9]+}/deviceconnect`)
        traefik.http.routers.deviceconnectDev.service: deviceconnect
        traefik.http.routers.deviceconnectMgmt.middlewares: "mgmtStack@file"
        traefik.http.routers.deviceconnectMgmt.rule: >-
          PathPrefix(`/api/management/{version:v[0-9]+}/deviceconnect`)
        traefik.http.routers.deviceconnectMgmt.service: deviceconnect
    networks:
      traefik-public:
        aliases: [mender-deviceconnect]
      default:
        aliases: [mender-deviceconnect]

  gui:
    image: ${MENDER_IMAGE_REGISTRY:-localhost:5000}/${MENDER_IMAGE_REPOSITORY:-mendersoftware}/gui:${MENDER_IMAGE_TAG:-latest}
    build:
      context: ./frontend
    restart: on-failure:3
    deploy:
      labels:
        traefik.enable: "true"
        traefik.constraint-label-stack: "traefik-public"
        traefik.http.services.gui.loadBalancer.server.port: "8090"
        traefik.http.services.error-responder.loadBalancer.server.port: "8080"
        traefik.http.routers.gui.middlewares: >-
          compression@file,sec-headers@file,json-error-responder@file
        traefik.http.routers.gui.priority: 1
        traefik.http.routers.gui.rule: PathPrefix(`/`) && !PathPrefix(`/api`)
        traefik.http.routers.gui.service: gui
    environment:
      HAVE_AUDITLOGS: "0"
      HAVE_DELTA_PROGRESS: "0"
      HAVE_DEVICECONFIG: "1"
      HAVE_DEVICECONNECT: "1"
      HAVE_ENTERPRISE: "0"
      HAVE_MONITOR: "0"
      HAVE_MULTITENANT: "0"
    networks:
      - traefik-public
      - default

  inventory:
    build:
      context: .
      dockerfile: ./backend/services/inventory/Dockerfile
    image: ${MENDER_IMAGE_REGISTRY:-localhost:5000}/${MENDER_IMAGE_REPOSITORY:-mendersoftware}/inventory:${MENDER_IMAGE_TAG:-latest}
    restart: on-failure:3
    command: [server, --automigrate]
    environment:
      INVENTORY_DEVICEMONITOR_ADDR: http://devicemonitor:8080
      INVENTORY_ORCHESTRATOR_ADDR: http://workflows:8080
      INVENTORY_MONGO: ${MONGO_SERVER}
      INVENTORY_MONGO_USERNAME: ${MONGO_USER}
      INVENTORY_MONGO_PASSWORD: ${MONGO_PASSWORD}
      INVENTORY_NATS_URI: "nats://nats"
    deploy:
      labels:
        traefik.enable: "true"
        traefik.constraint-label-stack: traefik-public
        traefik.http.services.inventory.loadbalancer.server.port: "8080"
        traefik.http.routers.inventoryDevV1.middlewares: >-
          devStack@file,inventoryV1-replacepathregex@file
        traefik.http.routers.inventoryDevV1.rule: >-
          PathPrefix(`/api/devices/v1/inventory`)
        traefik.http.routers.inventoryDevV1.service: inventory
        traefik.http.routers.inventoryMgmtV1.middlewares: >-
          mgmtStack@file,inventoryMgmtV1-replacepathregex@file
        traefik.http.routers.inventoryMgmtV1.rule: >-
          PathPrefix(`/api/management/v1/inventory`)
        traefik.http.routers.inventoryMgmtV1.service: inventory
        traefik.http.routers.inventoryDev.middlewares: "devStack@file"
        traefik.http.routers.inventoryDev.rule: >-
          PathPrefix(`/api/devices/{version:v[2-9]+}/inventory`)
        traefik.http.routers.inventoryDev.service: inventory
        traefik.http.routers.inventoryMgmt.middlewares: "mgmtStack@file"
        traefik.http.routers.inventoryMgmt.rule: >-
          PathPrefix(`/api/management/{version:v[2-9]+}/inventory`)
        traefik.http.routers.inventoryMgmt.service: inventory

    networks:
      traefik-public:
        aliases: [mender-inventory]
      default:
        aliases: [mender-inventory]

  iot-manager:
    build:
      context: .
      dockerfile: ./backend/services/iot-manager/Dockerfile
    image: ${MENDER_IMAGE_REGISTRY:-localhost:5000}/${MENDER_IMAGE_REPOSITORY:-mendersoftware}/iot-manager:${MENDER_IMAGE_TAG:-latest}
    restart: on-failure:3
    command: [server, --automigrate]
    environment:
      IOT_MANAGER_DEVICEAUTH_URL: "http://deviceauth:8080"
      IOT_MANAGER_WORKFLOWS_URL: "http://workflows:8080"
      IOT_MANAGER_MONGO_URL: ${MONGO_SERVER}
      IOT_MANAGER_MONGO_USERNAME: ${MONGO_USER}
      IOT_MANAGER_MONGO_PASSWORD: ${MONGO_PASSWORD}
      IOT_MANAGER_NATS_URI: "nats://nats"
    deploy:
      labels:
        traefik.enable: "true"
        traefik.constraint-label-stack: traefik-public
        traefik.http.services.iot-manager.loadbalancer.server.port: "8080"
        traefik.http.routers.iot-managerMgmt.middlewares: "mgmtStack@file"
        traefik.http.routers.iot-managerMgmt.rule: >-
          PathPrefix(`/api/management/{version:v[0-9]+}/iot-manager`)
        traefik.http.routers.iot-managerMgmt.service: iot-manager
    networks:
      traefik-public:
        aliases: [mender-iot-manager]
      default:
        aliases: [mender-iot-manager]

  useradm:
    build:
      context: .
      dockerfile: ./backend/services/useradm/Dockerfile
    image: ${MENDER_IMAGE_REGISTRY:-localhost:5000}/${MENDER_IMAGE_REPOSITORY:-mendersoftware}/useradm:${MENDER_IMAGE_TAG:-latest}
    restart: on-failure:3
    command: [server, --automigrate]
    environment:
      USERADM_MONGO: ${MONGO_SERVER_ADMIN}
      USERADM_MONGO_USERNAME: ${MONGO_USER}
      USERADM_MONGO_PASSWORD: ${MONGO_PASSWORD}
      USERADM_SERVER_PRIV_KEY_PATH: "/etc/useradm/private.pem"
      LOG_LEVEL: "debug"
    deploy:
      labels:
        traefik.enable: "true"
        traefik.constraint-label-stack: traefik-public
        traefik.http.services.useradm.loadbalancer.server.port: "8080"
        traefik.http.routers.useradm.middlewares: "mgmtStack@file"
        traefik.http.routers.useradm.rule: >-
          PathPrefix(`/api/management/{version:v[0-9]+}/useradm`)
        traefik.http.routers.useradm.service: useradm
        traefik.http.routers.userauth.middlewares: >-
          compression@file,sec-headers@file,json-error-responder@file
        traefik.http.routers.userauth.rule: >-
          PathPrefix(`/api/management/{version:v[0-9]+}/useradm/{auth|oauth2|oidc}`)
        traefik.http.routers.userauth.service: useradm
    networks:
      - traefik-public
      - default
    volumes:
      - ./compose/config/mender.pem:/etc/useradm/private.pem

  workflows-worker:
    build:
      context: .
      dockerfile: ./backend/services/workflows/Dockerfile
    image: ${MENDER_IMAGE_REGISTRY:-localhost:5000}/${MENDER_IMAGE_REPOSITORY:-mendersoftware}/workflows:${MENDER_IMAGE_TAG:-latest}
    restart: on-failure:3
    command: ["worker"]
    environment:
      WORKFLOWS_MONGO_URL: ${MONGO_SERVER}
      WORKFLOWS_MONGO_USERNAME: ${MONGO_USER}
      WORKFLOWS_MONGO_PASSWORD: ${MONGO_PASSWORD}
      WORKFLOWS_NATS_URI: "nats://nats"
      DEPLOYMENTS_ADDR: deployments:8080
      DEVICEAUTH_ADDR: deviceauth:8080
      DEVICECONFIG_ADDR: deviceconfig:8080
      DEVICECONNECT_ADDR: deviceconnect:8080
      INVENTORY_ADDR: inventory:8080
      IOT_MANAGER_ADDR: iot-manager:8080
      USERADM_ADDR: useradm:8080
      WORKFLOWS_SERVER_ADDR: workflows:8080
      WOKRFLOWS_MENDER_URL: https://${DOMAIN?Variable not set}
      HAVE_DEVICECONFIG: "1"
    networks:
      traefik-public:
        aliases: [mender-workflows-worker]

  workflows:
    build:
      context: .
      dockerfile: ./backend/services/workflows/Dockerfile
    image: ${MENDER_IMAGE_REGISTRY:-localhost:5000}/${MENDER_IMAGE_REPOSITORY:-mendersoftware}/workflows:${MENDER_IMAGE_TAG:-latest}
    restart: on-failure:3
    command: [server, --automigrate]
    environment:
      WORKFLOWS_MONGO_URL: ${MONGO_SERVER}
      WORKFLOWS_MONGO_USERNAME: ${MONGO_USER}
      WORKFLOWS_MONGO_PASSWORD: ${MONGO_PASSWORD}
      WORKFLOWS_NATS_URI: "nats://nats"
    networks:
      traefik-public:
        aliases: [mender-workflows]
  traefik:
    image: traefik:v2.5
    networks:
      - traefik-public
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./compose/config/traefik:/etc/traefik/config:ro
    # ports:
    #   - "81:80"
    #   - "444:443"
    #   - "8081:8080"
    command:
      - --providers.docker=true
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `traefik-public`)
      - --providers.docker.exposedbydefault=false
      - --providers.docker.swarmmode=true
      - --providers.file.directory=/etc/traefik/config
      - --providers.file.filename=/etc/traefik/config/middlewares.yaml
      # - --providers.file.watch=true
      - --accesslog=true
      # - --log.level=DEBUG
      - --api=true
      # - --api.insecure=true

    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=traefik-public
        # - traefik.swarm.network=traefik-public
        - traefik.constraint-label=traefik-public
        # traefik-http set up only to use the middleware to redirect to https
        - traefik.http.middlewares.mender-compose-https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.mender-compose-https-redirect.redirectscheme.permanent=true
        # Handle host with and without "www" to redirect to only one of them
        # Uses environment variable DOMAIN
        # To disable www redirection remove the Host() you want to discard, here and
        # below for HTTPS
        - traefik.http.routers.mender-compose-traefik-http.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
        - traefik.http.routers.mender-compose-traefik-http.entrypoints=http
        # traefik-https the actual router using HTTPS
        - traefik.http.routers.mender-compose-traefik-https.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
        - traefik.http.routers.mender-compose-traefik-https.entrypoints=https
        - traefik.http.routers.mender-compose-traefik-https.tls=true
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.mender-compose-traefik-https.tls.certresolver=le
        # Define the port inside of the Docker service to use
        - traefik.http.services.mender-compose-traefik.loadbalancer.server.port=80
        # Handle domain with and without "www" to redirect to only one
        # To disable www redirection remove the next line
        - traefik.http.middlewares.mender-compose-www-redirect.redirectregex.regex=^https?:\/\/(www.)?(mender\.matta\.ai)\/(.*)
        # Redirect a domain with www to non-www
        # To disable it remove the next line
        # - traefik.http.middlewares.mender-compose-www-redirect.redirectregex.replacement=https://$${DOMAIN?Variable not set}/$${3}
        - traefik.http.middlewares.mender-compose-www-redirect.redirectregex.replacement=https://${DOMAIN?Variable not set}/$${3}
        # Redirect a domain without www to www
        # Middleware to redirect www, to disable it remove the next line 
        - traefik.http.routers.mender-compose-traefik-https.middlewares=mender-compose-www-redirect
        - traefik.http.routers.mender-compose-traefik-http.middlewares=mender-compose-www-redirect,mender-compose-https-redirect

  

  nats:
    image: nats:2.10
    command: [-js]
    networks:
      traefik-public:
        aliases: [mender-nats]
      default:
        aliases: [mender-nats]

  s3-master:
    image: chrislusf/seaweedfs
    command:
      - master
      - -mdir=/data
      - -ip=s3-master
      - -ip.bind=0.0.0.0
      - -electionTimeout=1s
      - -heartbeatInterval=200ms
      - -raftHashicorp=true
    networks:
      traefik-public:
        aliases: [s3-master]
      default:
        aliases: [s3-master]

  s3-volume:
    image: chrislusf/seaweedfs
    command:
      - volume
      - -mserver=s3-master:9333
      - -ip.bind=0.0.0.0
      - -port=8080
      - -dir=/data
      - -preStopSeconds=0
    networks:
      traefik-public:
        aliases: [s3-volume]
      default:
        aliases: [s3-volume]

  s3-filer:
    image: chrislusf/seaweedfs
    command:
      - filer
      - -master=s3-master:9333
      - -ip.bind=0.0.0.0
    networks:
      traefik-public:
        aliases: [s3-filer]
      default:
        aliases: [s3-filer]

volumes:
  mongo: {}

networks:
  traefik-public:
    external: true

configs:
  s3-conf:
    file: ./s3-conf.json